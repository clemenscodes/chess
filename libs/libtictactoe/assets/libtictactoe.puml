@startuml libtictactoe
'https://plantuml.com/class-diagram

package libtictactoe {
    view.TicTacToeView ..|> processing.core.PApplet
    view.TicTacToeView ..|> view.ITicTacToeView
    view.TicTacToeView --> "1" controller.ITicTacToeController
    AbstractTicTacToe <|-- view.TicTacToeView
    controller.TicTacToeController ..|> controller.ITicTacToeController
    controller.TicTacToeController ..|> "1" model.TicTacToeModel
    controller.TicTacToeController ..|> "1" view.ITicTacToeView

    abstract class AbstractTicTacToe {
        - DEFAULT_SIZE: final int
        - DEFAULT_MODE: final boolean

        + AbstractTicTacToe()
        + AbstractTicTacToe(size: int, darkMode: boolean)
        + setup(): void
    }

    package controller {
        interface ITicTacToeController {
            + nextFrame(): void
            + userInput(x: int, y: int): void
            + getBoard(): char[]
            + hasError(): boolean
            + getErrorMessage(): String
            + getWinner(): char
            + restart(): void
        }
        class TicTacToeController {
            - model: TicTacToeModel
            - view: ITicTacToeView
            - winner: char
            - errorFlag: boolean
            - errorMessage: String

            + TicTacToeController()
            + setModel(model: TicTacToeModel): void
            + setView(view: ITicTacToeView): void
            + calculateWinner(): void
            + hasError(): boolean
            + getErrorMessage(): String
            + resetError(): void
            + getWinner(): char
            + nextFrame(): void
            + userInput(x: int, y: int): void
            + getBoard(): char[]
            + restart(): void
        }
    }

    package model {
        class TicTacToeModel {
          - EMPTY: char
          - PLAYER_1: char
          - PLAYER_2: char
          - gameState: char[]
          - moveCount: char
          + main(String[]): void
          + TicTacToeModel()
          + newGame(): void
          + getFieldEntry(int): char
          + isValidFieldIndex(int): boolean
          + isEmptyField(int): boolean
          + getActivePlayer(): char
          + move(int): void
          + isGameOver(): boolean
          + hasPlayer1Won(): boolean
          + hasPlayer2Won(): boolean
          + getFieldFromCoordinates(int, int, int): boolean
          - checkWinCondition(char): boolean
          + toString(): String
        }
    }

    package view {
        interface ITicTacToeView {
            + getSize(): int
            + drawGame(): void
        }
        class TicTacToeView {
            - controller: ITicTacToeController
            - size: int
            - darkMode: boolean
            - boardSize: final int

            + TicTacToeView(size: int, darkMode: boolean)
            + setController(controller: ITicTacToeController): void
            + setup(): void
            + draw(): void
            + mouseClicked(): void
            + getSize(): int
            + getFieldSize(): int
            + drawGame(): void
            + keyPressed(event: KeyEvent): void
            + setColorScheme(): void
            + setFillColor(): void
            + setStrokeColor(): void
            + setBackgroundColor(): void
            + drawGrid(): void
            + drawBoard(): void
            + drawField(x: int, y: int, value: char): void
            + drawError(errorMessage: String): void
            + drawGameOver(winner: char): void
        }
    }
}
@enduml
